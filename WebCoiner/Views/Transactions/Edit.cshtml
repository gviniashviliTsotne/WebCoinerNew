@model WebCoiner.Transaction

@{
    ViewBag.Title = "Edit";
}

    <section id="home_section" class="section_banner section_gradiant3">
       
       
        <div class="container animation animated fadeInUp">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Transaction</h4>
                    <hr />
                    <div class="container_white ">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)

                        <div class="form-group">
                            @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Tokens, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Tokens, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Tokens, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.BTC, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.BTC, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BTC, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Approved, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @* @Html.EditorFor(model => model.Approved, new { htmlAttributes = new { @class = "form-control" } })*@
                                @Html.ValidationMessageFor(model => model.Approved, "", new { @class = "text-danger" })

                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="customRadioInline1" name="Approved" class="custom-control-input " value="0" @if (Model.Approved == 0) { @Html.Raw("checked") }>
                                    <label class="custom-control-label" for="customRadioInline1">Pending</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="customRadioInline2" name="Approved" class="custom-control-input" value="1" @if (Model.Approved == 1) { @Html.Raw("checked") }>
                                    <label class="custom-control-label" for="customRadioInline2">Declined</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="customRadioInline3" name="Approved" class="custom-control-input" value="2" @if (Model.Approved == 2) { @Html.Raw("checked") }>
                                    <label class="custom-control-label" for="customRadioInline3">Approved</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div>
                @Html.ActionLink("Back to List", "list", null, new { @class = "btn-link" })
            </div>

        </div>
    </section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
